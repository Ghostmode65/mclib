local Falsify = function(error)
if error and Sys and Sys.admin then Chat:log('§cDebug Log:§f '..error) end
    return setmetatable({}, {
        __index = function() return nil end, --Any property returns false
        __call = function() return nil end  --Any method call returns false
    })
end


local Secure = function(error,func)
    return function(...)
        local status, response = pcall(func, ...)
        if not status then Chat:log('§4Critcal Error: '..error) return Falsify() end
        return response
    end
end

local Lib = {}

Lib.tableToString = function(tbl, indent)
    indent = indent or 0
    local spacing = string.rep(" ", indent)
    local toString = spacing .. "{\n"
    local isArray = #tbl > 0 -- Check if the table behaves like an array

    for key, value in pairs(tbl) do
        local formattedKey = isArray and spacing .. "    " or string.format("%s['%s'] = ", spacing .. "    ", tostring(key))

        if type(value) == "table" then
            toString = toString .. formattedKey .. "\n" .. Lib.tableToString(value, indent + 4) .. ",\n"
        elseif type(value) == "number" then
            toString = toString .. formattedKey .. value .. ",\n"
        elseif type(value) ~= "string" or key == "func" then
            toString = toString .. formattedKey .. "'" .. tostring(value) .. "'" .. ",\n"
        else
            toString = toString .. formattedKey .. "'" .. tostring(value) .. "',\n"
        end
    end

    toString = toString .. spacing .. "}"
    return toString
end
    


Lib.printTbl = function(tbl, depth)
    if type(tbl) ~= "table" then Chat:log("§4Critcal Error: No table to print ") return false end
    if depth == nil then Chat:log('§d~~~~~~~~~~') end
    if not depth or type(depth) ~= "number" then depth = 0 end
    local indent = string.rep("    ", depth)

    for key, value in pairs(tbl) do
        if type(value) == "table" then
            Chat:log(indent .. "§e[" .. tostring(key) or "" .. "] = {")
            Lib.printTbl(value, depth + 1)
            Chat:log(indent .. "§e},")
        elseif type(value) ~= "function" then
            Chat:log(indent .. tostring(key) .. ": " .. tostring(value) .. ",")
        end
    end
    if depth == 0 then Chat:log('§d~~~~~~~~~~') end
end

--Wont need code above if they are set as globals

local Settings = {}
Settings.Folder = JsMacros:getConfig().configFolder:getPath().."/Plugin-Settings/"

Settings.genarate = function(fileName,tbl)
    local file = Settings.Folder..fileName..".lua"
    FS:createFile(Settings.Folder, file, true)
    Client:waitTick()
    FS:open(file):write("return "..tbl)
end

Settings.add = function(fileName,Version,tbl)
    if FS:exists(Settings.Folder..fileName..".lua") then return false end
    Settings.genarate(fileName,[[{
['Info'] = {['Version'] = ]]..tostring(Version)..[[},
['Settings'] = ]]..Lib.tableToString(tbl) .. [[}]])
end

Settings.overWrite = function(fileName,Version,tbl)
Client:waitTick()
    if not FS:exists(Settings.Folder..fileName..".lua") then
    Settings.genarate(fileName,[[{
        ['Info'] = {['Version'] = ]]..tostring(Version)..[[},
        ['Settings'] = ]]..Lib.tableToString(tbl) .. [[}]])
    else
        FS:open(Settings.Folder..fileName..".lua"):write("return "..[[{
        ['Info'] = {['Version'] = ]]..tostring(Version)..[[},
        ['Settings'] = ]]..Lib.tableToString(tbl) .. [[}]])
    end end

Settings.load = Secure("Settings Loader",function(fileName)
    local file = Settings.Folder..fileName..".lua"
    if not FS:exists(file) then return false end

    local script = load(FS:open(file):read())
    if script then return script() end
end)

Settings.get = Secure("Loading Setting", function(fileName)
    local mainTable = Settings.load(fileName)
    if mainTable then return mainTable["Settings"] else return nil end
end)


Settings.Values = Secure("Getting Value", function(fileName)
    local values = {}
    if not Settings.get(fileName) then return nil end
    for key, value in pairs(Settings.get(fileName)) do
        values[key] = value.value
    end
    return values
end)

Settings.Server = Secure("Loading Setting", function()
for i, file in pairs(FS:list(JsMacros:getConfig().configFolder:getPath().."/Plugin-Settings/")) do
    local serverName = file:gsub("%.lua$", "")
    if serverName and string.find(World:getCurrentServerAddress(), serverName, 1, true) then
        return Settings.Values(serverName)
    end end
end)

Settings.create = function(key,parent)
local button = function(Tbl)
    parent[key] ={Render = {type = 'button',width = Tbl.width,height = Tbl.height,
        text = Tbl.text,func = Tbl.func or ""},value = Tbl.value}
    end

local slider = function(Tbl)
    parent[key] ={Render = {type = 'slider',width = Tbl.width,height = Tbl.height,
        text = Tbl.text,func = Tbl.func or ""},value = Tbl.value}
    end
    
local checkbox = function(Tbl) -- x,y,width,height,text,value,align,element, func
        parent[key] ={Render = {type = 'checkbox',width = Tbl.width,height = Tbl.height,
        text = Tbl.text,func = Tbl.func or ""},value = Tbl.value}
    end
    
local cyclingButton = function(Tbl) --x,y,width,height,prefix,table1,table2,align,element,func
        parent[key] ={Render = {type = 'cyclingButton',width = Tbl.width,height = Tbl.height,
            prefix = Tbl.prefix,options = Tbl.options,options2 = Tbl.options2,func = Tbl.func or ""},value = Tbl.value}
    end

local textInput = function(Tbl)
    parent[key] ={Render = {type = 'textInput',width = Tbl.width,height = Tbl.height,
        text = Tbl.text, suggestion = Tbl.suggestion, maxCharacters = Tbl.maxCharacters,func = Tbl.func or ""},value = Tbl.value}
        
    end
return {
    button = button,
    slider = slider,
    checkbox = checkbox,
    cyclingButton = cyclingButton,
    textInput = textInput
}
end



Settings.manager = function(fileName)
    if not FS:exists(Settings.Folder..fileName..".lua") then return Falsify('Settings not found') end
    Client:waitTick()
local plugin = Settings.load(fileName)
if not plugin then return Falsify('Settings are invalid') end


local save = function(newValues)
if Sys and Sys.administrator then Chat:log('Saved') Lib.printTbl(newValues) end
Client:waitTick()
for key, value in pairs(newValues) do
        plugin.Settings[key].value = value
    end
Settings.overWrite(fileName,plugin.Info.Version,plugin.Settings)
end

local get ={
version = function()
    return plugin.Info.Version end
}

return{save = save,get = get}end

return Settings