Chat:log('Accessing Settings')

local Settings = {}
Settings.Folder = JsMacros:getConfig().configFolder:getPath().."/Plugin-Settings/"

Settings.genarate = function(fileName,table)
    local file = Settings.Folder..fileName..".lua"
    FS:createFile(Settings.Folder, file, true)
    Client:waitTick()
    FS:open(file):write("return "..table)
end

Settings.new = function(fileName,Version,table)
    if FS:exists(Settings.Folder..fileName..".lua") then return false end
    Settings.genarate(fileName,[[{
['Info'] = {['Version'] = ]]..tostring(Version)..[[},
['Settings'] = ]]..Sys.tableToString(table) .. [[}]])
end

Settings.overWrite = function(fileName,Version,table)
if Sys.administrator then Chat:log('Over Writing '..fileName) end
Client:waitTick()
    if not FS:exists(Settings.Folder..fileName..".lua") then
    Settings.genarate(fileName,[[{
        ['Info'] = {['Version'] = ]]..tostring(Version)..[[},
        ['Settings'] = ]]..Sys.tableToString(table) .. [[}]])
    else
        FS:open(Settings.Folder..fileName..".lua"):write("return "..[[{
        ['Info'] = {['Version'] = ]]..tostring(Version)..[[},
        ['Settings'] = ]]..Sys.tableToString(table) .. [[}]])
end
if Sys.administrator then Chat:log('Over Wrote '..fileName) end
end

Settings.load = Secure("Settings Loader",function(fileName)
    local file = Settings.Folder..fileName..".lua"
    if not FS:exists(file) then return false end

    local script = load(FS:open(file):read())
    if script then return script() end
end)

Settings.get = function(fileName)
local mainTable = Settings.load(fileName)
if mainTable then return mainTable["Settings"] else return nil end
end

Settings.create = function(key,parent)
local button = function(Table)
    local width, height = Table.width, Table.height
    local type, value, text, func = 'button',Table.value, Table.text, Table.func
    parent[key] ={Render = {type = type,width = width,height = height,text = text,func = func},value = value}
    
    end
    
local slider = function(Table)
    local width, height = Table.width, Table.height
    local type, value, text, func = 'slider',Table.value, Table.text, Table.func
    parent[key] ={Render = {type = type,width = width,height = height,text = text,func = func},value = value}
    
    return nil
    end
    
local checkbox = function(Table) -- x,y,width,height,text,value,align,element, func
    local width, height = Table.width, Table.height
    local type, value, text, func = 'checkBox',Table.value, Table.text, Table.func
     parent[key] ={Render = {type = type,width = width,height = height,text = text,func = func},value = value}
    
    end
    
local cyclingButton = function(Table) --x,y,width,height,prefix,table1,table2,align,element,func
        local width, height = Table.width, Table.height
        local type, value,prefix, options, options2, func = 'cyclingButton',Table.value,Table.prefix, Table.options,Table.options2, Table.func
        parent[key] ={Render = {type = type,width = width,height = height,options = options,options2 = options2,
        func = func},value = value} --Colors: Blue (Takes the text after :)
        
    end

local textInput = function(Table)
    local width, height = Table.width, Table.height
    local type, value, text, suggestion, maxCharacters, func = 'textInput',Table.value, Table.text, Table.suggestion, Table.maxCharacters, Table.func
    parent[key] ={Render = {type = type,width = width,height = height,text = text,suggestion = suggestion,maxCharacters = maxCharacters,
        func = func}, value = value}
        
    end
return {
    button = button,
    slider = slider,
    checkbox = checkbox,
    cyclingButton = cyclingButton,
    textInput = textInput
}
end


Settings.manager = function(fileName)
    if not FS:exists(Settings.Folder..fileName..".lua") then return Falsify('Settings not found') end
    Chat:log('Getting Plugin')
    Client:waitTick()
local plugin = Settings.load(fileName)
Sys.printTable(plugin.Settings)


local save = function(newValues)
if Sys.administrator then Chat:log('Saved') Sys.printTable(newValues) end
Client:waitTick()
--for key, value in pairs(newValues) do
        --plugin.Settings[key].value = value
    --end
Settings.overWrite(fileName,plugin.Info.Version,plugin.Settings)
end


return{

save = save,

}end



return Settings



 
    




