local Settings = {}
Settings.Folder = JsMacros:getConfig().configFolder:getPath().."/Plugin-Settings/"

Settings.genarate = function(fileName,table)
    local file = Settings.Folder..fileName..".lua"
    FS:createFile(Settings.Folder, file, true)
    Client:waitTick()
    FS:open(file):write("return "..table)
end

Settings.new = function(fileName,Version,table)
    if FS:exists(Settings.Folder..fileName..".lua") then return false end
    Settings.genarate(fileName,[[{
['Info'] = {['Version'] = ]]..tostring(Version)..[[},
['Settings'] = ]]..Sys.tableToString(table) .. [[}]])
end


Settings.load = Secure("Settings Loader",function(fileName)
    local file = Settings.Folder..fileName..".lua"
    if not FS:exists(file) then return false end

    local script = load(FS:open(file):read())
    if script then return script() end
end)

Settings.get = function(fileName)
local mainTable = Settings.load(fileName)
if mainTable then return mainTable["Settings"] else return nil end
end

Settings.create = function(key,parent)
local button = function(Table)
    local width, height = Table.width, Table.height
    local type, value, text, func = 'button',Table.value, Table.text, Table.func
    parent[key] ={Render = {type = type,width = width,height = height,text = text,func = function() func() end},value = value}
    
    end
    
local slider = function(Table)
    local width, height = Table.width, Table.height
    local type, value, text, func = 'slider',Table.value, Table.text, Table.func
    parent[key] ={Render = {type = type,width = width,height = height,text = text,func = func},value = value}
    
    return nil
    end
    
local checkbox = function(Table) -- x,y,width,height,text,value,align,element, func
    local width, height = Table.width, Table.height
    local type, value, text, func = 'checkbox',Table.value, Table.text, Table.func
     parent[key] ={Render = {type = type,width = width,height = height,text = text,func = function() func() end},value = value}
    
    end
    
local cyclingButton = function(Table) --x,y,width,height,prefix,table1,table2,align,element,func
        local width, height = Table.width, Table.height
        local type, value,prefix, table1, table2, func = 'cyclingButton',Table.value,Table.prefix, Table.Table,Table.Table2, Table.func
        parent[key] ={Render = {type = type,width = width,height = height,table = table1,table2 = table2,
        func = function(str) local str = str:match(": (.+)") func(str) end},value = value} --Colors: Blue (Takes the text after :)
        
    end

local textInput = function(Table)
    local width, height = Table.width, Table.height
    local type, value, text, suggestion, maxCharacters, func = 'textInput',Table.value, Table.text, Table.suggestion, Table.maxCharacters, Table.func
    parent[key] ={Render = {type,width = width,height = height,text = text,suggestion = suggestion,maxCharacters = maxCharacters,
        func = function(str) func(str) end}, value = value}
        
    end
return {
    button = button,
    slider = slider,
    checkbox = checkbox,
    cyclingButton = cyclingButton,
    textInput = textInput
}
end


Settings.manger = function(fileName)
local file = Settings.Folder..fileName..".lua"
    if not FS:exists(file) then return Falsify('Settings not found') end
local plugin = Settings.load()

return {
add = function(Table) --Wont Work Like this
    local newer, shouldUpdate = {}, false
    for key, setting in pairs(plugin) do
        if not plugin.Settings[key] then
            table.insert(newer, setting)
            shouldUpdate = true
        end end
    if shouldUpdate then Settings.genarate(fileName,newer) end
end,

refresh = function(Table)
    for key, value in pairs(Table) do
        if value ~= plugin.Settings[key].value then
            plugin.Settings[key] = value
        end end
    Settings.genarate(fileName,plugin)
    end,

update = function(Table)
    if Table.Info.Version > plugin.Info.Version then
        Settings.genarate(fileName,table)
    end end,

}end

return Settings

--Todo:
--Remove Sys Table
--Debug Funcions
    --> Override save file










