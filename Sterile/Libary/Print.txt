local getfield = function(class,field)
    local Field = Reflection:getDeclaredField(class:getClass(), field)
    Field:setAccessible(true)
return Field end

local toggleFullscreen = function()
    local window = getfield(Client:getMinecraft(), "field_1704"):get(Client:getMinecraft())
    local isFullScreen = Reflection:getDeclaredMethod(window:getClass(), "method_4498", {})
    local toggleFullscreen = Reflection:getDeclaredMethod(window:getClass(), "method_4500", {})
    
    if not Reflection:invokeMethod(isFullScreen, window, {}) then
        toggleFullscreen:invoke(window, {})
    end
end


local InjectFile = function(url)
    if not url or type(url) ~= "string" then Chat:log('§4System Error: §fInvalid file'.." [code]") return false end
    
    local success, result = pcall(function()
        local script = load(Request:create(url):get():text())
        return script and script() or false
    end)
    
    if not success then Chat:log('§4System Error: §fFailed to load'.." [execute]") return false end
    return result
end

local Injected = {
    settings = InjectFile("https://raw.githubusercontent.com/Ghostmode65/mclib/refs/heads/main/Sterile/Libary/Settings.txt") or nil,
    renders = InjectFile("https://raw.githubusercontent.com/Ghostmode65/mclib/refs/heads/main/Sterile/Libary/Renders.txt") or nil
}

local ob = {}

ob.f_stringchar = string.char;
ob.f_stringbyte = string.byte;
ob.f_stringsub = string.sub;
ob.f_bitlib = bit32 or bit;
ob.f_XOR = ob.f_bitlib.bxor;
ob.f_tableconcat = table.concat;
ob.f_tableinsert = table.insert;
local function obkey_D( obkey_STR,  obkey_KEY)
    local result = {};
    for i = 1, # obkey_STR do
        ob.f_tableinsert(result, ob.f_stringchar(ob.f_XOR(ob.f_stringbyte(ob.f_stringsub(obkey_STR, i, i + 1)),
        ob.f_stringbyte(ob.f_stringsub(obkey_KEY, 1 + (i % # obkey_KEY), 1 + (i % # obkey_KEY) + 1))) % 256));
    end
    return ob.f_tableconcat(result);
end
local A_L = (Injected.settings.get(obkey_D("\240\199\214\44\232", "\126\177\163\187\69\134\219\167")) and Injected.settings.get(obkey_D("\2\201\39\204\242", "\156\67\173\74\165"))[obkey_D("\24\184\78\5", "\38\84\215\41\118\220\70")]) or {};
--If your using Globals then the above is not required

local Print =
{
    Data = {Logs = {}, ConsoleLogs = {}, ConsoleWindow = nil},
    Colors = {white = "§f",green = "§a",blue = "§b",purple = "§d",yellow = "§e",red = "§c",darkRed = "§4",gray = "§7"},
    Icons = {warning = "⚠ ",error = "⚠ ",info = "ℹ ",success = "✔ "}
}


local Settings = Injected and Injected.settings and Injected.settings.get('Fabric Refresher') or
{
    ['Log Method'] = {value = 'Chat'},
    ['debug'] = {value = false},
    ['Time Stamp'] = {value = false}
}

local function formatMessage(text, header, textColor)
    textColor = textColor or Print.Colors.white
    if not text:find("^§") then text = textColor .. text end
    return header and (header.." ".. Print.Colors.gray..text) or (Print.Colors.gray .. "Console: " .. text)
end


Print.log = function(text, header, options)
    options = options or {}
    local method = options.method or ((Settings['Log Method'] and Settings['Log Method'].value) or 'Chat')
    local color = options.color
    local showTimestamp = options.timestamp or (Settings['Time Stamp'] and Settings['Time Stamp'].value or false)
    
    local message = (showTimestamp and "[" .. os.date("%H:%M:%S | ") .. "] " or "") .. formatMessage(text, header, color)
    table.insert(Print.Data.Logs, "[" .. os.date("%H:%M:%S | ") .. "] " .. formatMessage(text, header, color))
    
    local methods = {
        Toast = function() Chat:toast(header or "Message", text) end,
        Console = function() 
            table.insert(Print.Data.ConsoleLogs, message)
            
            -- Initialize or update console window if renders library is available
            if Injected.renders then
                if not Print.Data.ConsoleWindow then
                    Print.Data.ConsoleWindow = Injected.renders.D2D.consoleWindow("Console", Print.Data.ConsoleLogs, {
                        color = 0x080508,
                        titleColor = 0xFFFFFF
                    })
                else
                    Print.Data.ConsoleWindow.update(Print.Data.ConsoleLogs)
                end
            else
                -- Fallback if renders library isn't available
                table.insert(Print.Data.ConsoleLogs, message)
            end
        end,
        Chat = function() Chat:log(message) end,
        Silent = function() end
    }

    (methods[method] or methods.Chat)()
    return true
end


Print.Print = {
    msg = function(text, header, options)
        Print.log(text, header or (Print.Colors.green .. "Console:"), options or {}) end,
    
    log = function(text, options)
        if A_L and (A_L.value == "logs" or A_L.value == "pcall") then
            Print.log(text, Print.Colors.white .. "Log:", options or {})
        end
    end,
    
    debug = function(text, options)
        if Settings['Debug Mode'] and Settings['Debug Mode'].value then
            return Print.log(text, Print.Colors.purple .. "Debug:", options or {})
        end
    end,
    
    warn = function(text, options)
        Print.log(text, Print.Colors.yellow .. Print.Icons.warning .. "Warning:", options or {})
        if not (options or (options and options.fullscreen)) then toggleFullscreen() end
    end,
    
    error = function(text, options)
        return Print.log(text, Print.Colors.darkRed .. Print.Icons.error .. "Error:", options or {})
    end,

    crital = function(text)
        if A_L and (A_L.value == "pcall") then
        return Chat:log(text)
    end end,
    
    success = function(text, options)
        return Print.log(text, Print.Colors.green .. Print.Icons.success .. "Success:", options or {})
    end,
    
    info = function(text, options)
        return Print.log(text, Print.Colors.blue .. Print.Icons.info .. "Info:", options or {})
    end
}

Print.massPrint = function(tbl, options)
    for header, text in pairs(tbl) do
        Print.Print.msg(text, header, options)
    end
end

Print.clearLogs = function()
    Print.Data.Logs = {}
    if Print.Data.ConsoleWindow then
        Print.Data.ConsoleWindow.remove()
        Print.Data.ConsoleWindow = nil
    end
    Print.Data.ConsoleLogs = {}
    return true
end

return Print